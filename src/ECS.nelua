require "src/Globals"
##[[
TOTAL_ARCHETYPES = 0
ArchetypeDictionary = {}
ArchetypeComponents = {}

_ToSig = function(compTable)
	local dedupe = {}
	local hash = {}
	for _,v in ipairs(compTable) do
		if not hash[v] then
			dedupe[#dedupe+1] = v.name
			hash[v] = true
		end
	end
	table.sort(dedupe, function(a, b) return a:lower() < b:lower() end)
	local sigOut = ""
	for i,v in ipairs(dedupe) do
		sigOut = sigOut .."_".. v
	end
	return sigOut
end

function RegisterArchetype(compTable)
	
	local signature = _ToSig(compTable)
	if not ArchetypeDictionary[signature] then
		TOTAL_ARCHETYPES = TOTAL_ARCHETYPES + 1
		ArchetypeDictionary[signature] = TOTAL_ARCHETYPES
		
		ArchetypeComponents[TOTAL_ARCHETYPES] = compTable
	end
end

function AddComponents(entityIn, compTable)
	--table.insert(AllUses.Add, compTable)
end

function RemoveComponents(entityIn, compTable)
	--table.insert(AllUses.Remove, compTable)
end

function Query(compTable)
	--table.insert(AllUses.Query, compTable)
end



_G.AllUses = {
    Query = {},
    Add = {},
    Remove = {}
}


Add = function(_, compTable)
    table.insert(AllUses.Add, compTable)
end

Remove = function(_, compTable)
    table.insert(AllUses.Remove, compTable)
end

Queryy = function(compTable)
    table.insert(AllUses.Query, compTable)
end

]]


global Archetype = @record{
	componentCount: int,
	componentStreams: hashmap(int, pointer)
}

global Entity = @record{
	index: int,
	version: int
}

global EntityInfo = @record{
	archetypeIndex: short,
	chunkIndex: short,--REMOVE THIS! This can be calculated because we have the chunk size information to do so.
	streamIndex: short,
	version: int
}

##[[
function reerSwous()

	
end
]]


##reerSwous()
--[[
Do we really put a system in place that iterates over every single "EntityComponent" in every chunk and checks if their 
is something that needs to be done with that in the end of frame command buffer? Or am i STILL missing something about this
EntityInfo struct? How on earth did unity do it? How did they store an entity using only index and version?
]]
--[[   IMPORTANT IDEA FOR ENTITYINFO! 
Maybe if we need to save space, you can mark an entity as static using a function called SetInStone(EntityIn).
This function deletes that Entities EntityInfo and makes the Entity record pointing to that location useless meaning you can delete it.
The component data is all still in all the archetypes and can even still be deleted because you have the entities info as you iterate,
but now u just can't access an entity from outside a query in order to add or remove components from it. Now wait just a minute.
There's something that I know im missing here and I don't know what it is, but it involves never needing to store Entity OR EntityInfo.
]]
require "allocators.general"

global EntitiesCount: int = 0

global EntityInfosCount = 0
global EntityInfos: span(EntityInfo) = general_allocator:new(EntityInfo, 1)

local function _CreateEntities()
	--TODO:
end

global function CreateEntity(): Entity
	local EntIndex = EntitiesCount
	EntitiesCount = EntitiesCount + 1
	return Entity{EntIndex, 0}
end

global function AddComponent(entityIn: Entity, component: auto)
	##print(component.type.size)
end

--pseuodocode
--[[

PosSizeArchetype = {
	signature: 
	componentArrays: vector = {},
	
}

local Archetype = {
	Signature = 0,
	Streams: [#[CompCount]#]pointer,
}

local A1 = #[GetArchetypeType(Position, Size)]#
local A2 = #[GetArchetypeType(Position, Size, Gravity)]#

local TestArch1: A1 = A1{data}

local 

##Archetype.value.name

## function Archetype(...: varargs)
    local Archetype = @record{
        Signature: int64,
        Streams: []vectorT{
            ##for i = 1, #... do
                vectorT
            ##end
        },
    }
## end


]]


